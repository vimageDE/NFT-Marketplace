{
  "address": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "nftAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "sigOwner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "typeOf",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "nonce",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        }
      ],
      "name": "PurchaseNft",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "name": "SellNft",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNonce",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "sigOwner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "typeOf",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "nonce",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        }
      ],
      "name": "getSigner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xe5dbc84f9486e61a734b43ca591ffdcd0c6f47d356dc157857091fa232c00bdb",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
    "transactionIndex": 0,
    "gasUsed": "474976",
    "logsBloom": "0x
    "blockHash": "0xcef23e8d04a7764c26d8691c4dd00b03837b6a2ca797af6dcdd2a29cdd81ff24",
    "transactionHash": "0xe5dbc84f9486e61a734b43ca591ffdcd0c6f47d356dc157857091fa232c00bdb",
    "logs": [],
    "blockNumber": 2,
    "cumulativeGasUsed": "474976",
    "status": 1,
    "byzantium": true
  },
  "args": ["0x5FbDB2315678afecb367f032d93F642f64180aa3"],
  "numDeployments": 1,
  "solcInputHash": "d8d68221c77a89dbcbe30dfc6d424f8d",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"sigOwner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"typeOf\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"PurchaseNft\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"SellNft\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"sigOwner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"typeOf\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"getSigner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Market.sol\":\"Market\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5bce51e11f7d194b79ea59fe00c9e8de9fa2c5530124960f29a24d4c740a3266\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/Market.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\r\\n\\r\\ncontract Market {\\r\\n    uint256 private constant MIN_PRICE = 1000000000000000;\\r\\n\\r\\n    IERC721 private immutable i_nft;\\r\\n    mapping(address => uint256) s_addressToNonce;\\r\\n\\r\\n    constructor(address nftAddress) {\\r\\n        i_nft = IERC721(nftAddress);\\r\\n    }\\r\\n\\r\\n    function PurchaseNft(\\r\\n        uint256 tokenId,\\r\\n        address sigOwner,\\r\\n        uint256 price,\\r\\n        string memory typeOf,\\r\\n        uint256 nonce,\\r\\n        bytes memory signature\\r\\n    ) public view returns (bool) {\\r\\n        require(i_nft.ownerOf(tokenId) == msg.sender, \\\"Not owner\\\");\\r\\n\\r\\n        address signerOfSignature = getSigner(tokenId, sigOwner, price, typeOf, nonce, signature);\\r\\n        require(signerOfSignature == sigOwner, \\\"Wrong Signature\\\");\\r\\n\\r\\n        // Do the purchase!\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function SellNft(uint256 tokenId, uint256 price) public {}\\r\\n\\r\\n    // View Functions\\r\\n    function getSigner(\\r\\n        uint256 tokenId,\\r\\n        address sigOwner,\\r\\n        uint256 price,\\r\\n        string memory typeOf,\\r\\n        uint256 nonce,\\r\\n        bytes memory signature\\r\\n    ) public view returns (address) {\\r\\n        // EIP 721 domain type /*\\r\\n        /*string memory name = \\\"NFT Portfolio\\\";\\r\\n        string memory version = \\\"1\\\";\\r\\n        uint256 chainId = block.chainid;\\r\\n        address verifyingContract = address(this); */\\r\\n\\r\\n        // stringified types\\r\\n        string\\r\\n            memory EIP712_DOMAIN_TYPE = \\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\";\\r\\n        string memory MESSAGE_TYPE = \\\"Message(uint256 tokenId,uint256 nonce,string typeOf)\\\";\\r\\n        // memory MESSAGE_TYPE = \\\"Message(uint256 tokenId, address sigOwner, uint256 price, string typeOf, uint256 nonce)\\\";\\r\\n\\r\\n        // hash to prevent signature collision\\r\\n        bytes32 DOMAIN_SEPARATOR = keccak256(\\r\\n            abi.encode(\\r\\n                keccak256(abi.encodePacked(EIP712_DOMAIN_TYPE)),\\r\\n                keccak256(abi.encodePacked(\\\"NFT Portfolio\\\")),\\r\\n                keccak256(abi.encodePacked(\\\"1\\\")),\\r\\n                block.chainid,\\r\\n                address(this)\\r\\n            )\\r\\n        );\\r\\n\\r\\n        // hash typed data\\r\\n        // IMPORTANT!! the same data types MUST be packed together! it will not work to mix uint256, then string, then uint256!\\r\\n        bytes32 hash = keccak256(\\r\\n            abi.encodePacked(\\r\\n                \\\"\\\\x19\\\\x01\\\", // backslash is needed to escape the character\\r\\n                DOMAIN_SEPARATOR,\\r\\n                keccak256(\\r\\n                    abi.encodePacked(\\r\\n                        keccak256(abi.encodePacked(MESSAGE_TYPE)),\\r\\n                        tokenId,\\r\\n                        nonce,\\r\\n                        // price,\\r\\n                        // sigOwner,\\r\\n                        //\\r\\n                        keccak256(abi.encodePacked(typeOf))\\r\\n                        // nonce\\r\\n                    )\\r\\n                )\\r\\n            )\\r\\n        );\\r\\n\\r\\n        return recover(hash, signature);\\r\\n    }\\r\\n\\r\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\r\\n        // split signature\\r\\n        bytes32 r;\\r\\n        bytes32 s;\\r\\n        uint8 v;\\r\\n        if (signature.length != 65) {\\r\\n            return address(0);\\r\\n        }\\r\\n        assembly {\\r\\n            r := mload(add(signature, 32))\\r\\n            s := mload(add(signature, 64))\\r\\n            v := byte(0, mload(add(signature, 96)))\\r\\n        }\\r\\n        if (v < 27) {\\r\\n            v += 27;\\r\\n        }\\r\\n        if (v != 27 && v != 28) {\\r\\n            return address(0);\\r\\n        } else {\\r\\n            // verify\\r\\n            return ecrecover(hash, v, r, s);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function getNonce() public view returns (uint256) {\\r\\n        return s_addressToNonce[msg.sender];\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x9c9b2d99d7890ed817c54a705a174a00aca603e5c106d871ba0bfd3751788c4c\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a060405234801561001057600080fd5b5060405161082238038061082283398101604081905261002f91610040565b6001600160a01b0316608052610070565b60006020828403121561005257600080fd5b81516001600160a01b038116811461006957600080fd5b9392505050565b60805161079861008a600039600060f901526107986000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c80633835acd51461005157806361f617b414610079578063d087d288146100a4578063e17b6081146100c2575b600080fd5b61006461005f366004610583565b6100d6565b60405190151581526020015b60405180910390f35b61008c610087366004610583565b61021e565b6040516001600160a01b039091168152602001610070565b33600090815260208190526040902054604051908152602001610070565b6100d46100d0366004610640565b5050565b005b6040516331a9108f60e11b81526004810187905260009033906001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690636352211e90602401602060405180830381865afa158015610140573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101649190610662565b6001600160a01b0316146101ab5760405162461bcd60e51b81526020600482015260096024820152682737ba1037bbb732b960b91b60448201526064015b60405180910390fd5b60006101bb88888888888861021e565b9050866001600160a01b0316816001600160a01b0316146102105760405162461bcd60e51b815260206004820152600f60248201526e57726f6e67205369676e617475726560881b60448201526064016101a2565b506001979650505050505050565b6000806040518060800160405280605281526020016106dd605291399050600060405180606001604052806034815260200161072f60349139905060008260405160200161026c9190610686565b604051602081830303815290604052805190602001206040516020016102a5906c4e465420506f7274666f6c696f60981b8152600d0190565b604051602081830303815290604052805190602001206040516020016102d290603160f81b815260010190565b60408051601f1981840301815282825280516020918201209083019490945281019190915260608101919091524660808201523060a082015260c0016040516020818303038152906040528051906020012090506000818360405160200161033a9190610686565b604051602081830303815290604052805190602001208c898b6040516020016103639190610686565b60408051601f198184030181528282528051602091820120908301959095528101929092526060820152608081019190915260a001604051602081830303815290604052805190602001206040516020016103d592919061190160f01b81526002810192909252602282015260420190565b6040516020818303038152906040528051906020012090506103f78187610406565b9b9a5050505050505050505050565b600080600080845160411461042157600093505050506104d9565b50505060208201516040830151606084015160001a601b81101561044d5761044a601b826106b5565b90505b8060ff16601b1415801561046557508060ff16601c14155b1561047657600093505050506104d9565b60408051600081526020810180835288905260ff831691810191909152606081018490526080810183905260019060a0016020604051602081039080840390855afa1580156104c9573d6000803e3d6000fd5b5050506020604051035193505050505b92915050565b6001600160a01b03811681146104f457600080fd5b50565b634e487b7160e01b600052604160045260246000fd5b600067ffffffffffffffff80841115610528576105286104f7565b604051601f8501601f19908116603f01168101908282118183101715610550576105506104f7565b8160405280935085815286868601111561056957600080fd5b858560208301376000602087830101525050509392505050565b60008060008060008060c0878903121561059c57600080fd5b8635955060208701356105ae816104df565b945060408701359350606087013567ffffffffffffffff808211156105d257600080fd5b818901915089601f8301126105e657600080fd5b6105f58a83356020850161050d565b94506080890135935060a089013591508082111561061257600080fd5b508701601f8101891361062457600080fd5b6106338982356020840161050d565b9150509295509295509295565b6000806040838503121561065357600080fd5b50508035926020909101359150565b60006020828403121561067457600080fd5b815161067f816104df565b9392505050565b6000825160005b818110156106a7576020818601810151858301520161068d565b506000920191825250919050565b60ff81811683821601908111156104d957634e487b7160e01b600052601160045260246000fdfe454950373132446f6d61696e28737472696e67206e616d652c737472696e672076657273696f6e2c75696e7432353620636861696e49642c6164647265737320766572696679696e67436f6e7472616374294d6573736167652875696e7432353620746f6b656e49642c75696e74323536206e6f6e63652c737472696e6720747970654f6629a26469706673582212207b67482c3a5e1a90d40b8d64cf978054a4d7f050068a46b98e6ac51e27e9a6fc64736f6c63430008130033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061004c5760003560e01c80633835acd51461005157806361f617b414610079578063d087d288146100a4578063e17b6081146100c2575b600080fd5b61006461005f366004610583565b6100d6565b60405190151581526020015b60405180910390f35b61008c610087366004610583565b61021e565b6040516001600160a01b039091168152602001610070565b33600090815260208190526040902054604051908152602001610070565b6100d46100d0366004610640565b5050565b005b6040516331a9108f60e11b81526004810187905260009033906001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690636352211e90602401602060405180830381865afa158015610140573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101649190610662565b6001600160a01b0316146101ab5760405162461bcd60e51b81526020600482015260096024820152682737ba1037bbb732b960b91b60448201526064015b60405180910390fd5b60006101bb88888888888861021e565b9050866001600160a01b0316816001600160a01b0316146102105760405162461bcd60e51b815260206004820152600f60248201526e57726f6e67205369676e617475726560881b60448201526064016101a2565b506001979650505050505050565b6000806040518060800160405280605281526020016106dd605291399050600060405180606001604052806034815260200161072f60349139905060008260405160200161026c9190610686565b604051602081830303815290604052805190602001206040516020016102a5906c4e465420506f7274666f6c696f60981b8152600d0190565b604051602081830303815290604052805190602001206040516020016102d290603160f81b815260010190565b60408051601f1981840301815282825280516020918201209083019490945281019190915260608101919091524660808201523060a082015260c0016040516020818303038152906040528051906020012090506000818360405160200161033a9190610686565b604051602081830303815290604052805190602001208c898b6040516020016103639190610686565b60408051601f198184030181528282528051602091820120908301959095528101929092526060820152608081019190915260a001604051602081830303815290604052805190602001206040516020016103d592919061190160f01b81526002810192909252602282015260420190565b6040516020818303038152906040528051906020012090506103f78187610406565b9b9a5050505050505050505050565b600080600080845160411461042157600093505050506104d9565b50505060208201516040830151606084015160001a601b81101561044d5761044a601b826106b5565b90505b8060ff16601b1415801561046557508060ff16601c14155b1561047657600093505050506104d9565b60408051600081526020810180835288905260ff831691810191909152606081018490526080810183905260019060a0016020604051602081039080840390855afa1580156104c9573d6000803e3d6000fd5b5050506020604051035193505050505b92915050565b6001600160a01b03811681146104f457600080fd5b50565b634e487b7160e01b600052604160045260246000fd5b600067ffffffffffffffff80841115610528576105286104f7565b604051601f8501601f19908116603f01168101908282118183101715610550576105506104f7565b8160405280935085815286868601111561056957600080fd5b858560208301376000602087830101525050509392505050565b60008060008060008060c0878903121561059c57600080fd5b8635955060208701356105ae816104df565b945060408701359350606087013567ffffffffffffffff808211156105d257600080fd5b818901915089601f8301126105e657600080fd5b6105f58a83356020850161050d565b94506080890135935060a089013591508082111561061257600080fd5b508701601f8101891361062457600080fd5b6106338982356020840161050d565b9150509295509295509295565b6000806040838503121561065357600080fd5b50508035926020909101359150565b60006020828403121561067457600080fd5b815161067f816104df565b9392505050565b6000825160005b818110156106a7576020818601810151858301520161068d565b506000920191825250919050565b60ff81811683821601908111156104d957634e487b7160e01b600052601160045260246000fdfe454950373132446f6d61696e28737472696e67206e616d652c737472696e672076657273696f6e2c75696e7432353620636861696e49642c6164647265737320766572696679696e67436f6e7472616374294d6573736167652875696e7432353620746f6b656e49642c75696e74323536206e6f6e63652c737472696e6720747970654f6629a26469706673582212207b67482c3a5e1a90d40b8d64cf978054a4d7f050068a46b98e6ac51e27e9a6fc64736f6c63430008130033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 140,
        "contract": "contracts/Market.sol:Market",
        "label": "s_addressToNonce",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}
