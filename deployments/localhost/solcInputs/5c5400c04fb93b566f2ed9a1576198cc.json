{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/token/ERC721/IERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 tokenId) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "contracts/Market.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\n\ncontract Market {\n    uint256 private constant MIN_PRICE = 1000000000000000;\n\n    IERC721 private immutable i_nft;\n    mapping(uint256 => bool) s_nonceIsUsed;\n\n    constructor(address nftAddress) {\n        i_nft = IERC721(nftAddress);\n    }\n\n    function PurchaseNft(\n        uint256 tokenId,\n        address sigOwner,\n        uint256 price,\n        string memory typeOf,\n        uint256 nonce,\n        uint256 timestamp,\n        bytes memory signature\n    ) public view returns (bool) {\n        require(i_nft.ownerOf(tokenId) == msg.sender, \"Not owner\");\n\n        address signerOfSignature = getSigner(tokenId, nonce, price, typeOf, timestamp, signature);\n        require(signerOfSignature == sigOwner, \"Wrong Signature\");\n        require(s_nonceIsUsed[nonce] == false, \"Nonce used\");\n\n        // Do the purchase!\n        return true;\n    }\n\n    function SellNft(uint256 tokenId, uint256 price) public {}\n\n    // View Functions\n    function getSigner(\n        uint256 tokenId,\n        uint256 nonce,\n        uint256 price,\n        string memory typeOf,\n        uint256 timestamp,\n        bytes memory signature\n    ) public view returns (address) {\n        address user = msg.sender;\n\n        // stringified types\n        string\n            memory EIP712_DOMAIN_TYPE = \"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\";\n        string\n            memory MESSAGE_TYPE = \"Message(uint256 tokenId,uint256 nonce,uint256 price,uint256 timestamp,string typeOf,address user)\";\n\n        // hash to prevent signature collision\n        bytes32 DOMAIN_SEPARATOR = keccak256(\n            abi.encode(\n                keccak256(abi.encodePacked(EIP712_DOMAIN_TYPE)),\n                keccak256(abi.encodePacked(\"NFT Portfolio\")),\n                keccak256(abi.encodePacked(\"1\")),\n                block.chainid,\n                address(this)\n            )\n        );\n\n        // hash typed data\n        // IMPORTANT!! abi.encode with MULTIPLE values/types. But with a SINGLE string, you MUST use abi.encodePacked\n        // this is relevant for the abi.encode that comes AFTER the DOMAIN_SEPARATOR!\n        bytes32 hash = keccak256(\n            abi.encodePacked(\n                \"\\x19\\x01\", // backslash is needed to escape the character\n                DOMAIN_SEPARATOR,\n                keccak256(\n                    abi.encode(\n                        keccak256(abi.encodePacked(MESSAGE_TYPE)),\n                        tokenId,\n                        nonce,\n                        price,\n                        timestamp,\n                        keccak256(abi.encodePacked(typeOf)),\n                        user\n                    )\n                )\n            )\n        );\n\n        return recover(hash, signature);\n    }\n\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        // split signature\n        bytes32 r;\n        bytes32 s;\n        uint8 v;\n        if (signature.length != 65) {\n            return address(0);\n        }\n        assembly {\n            r := mload(add(signature, 32))\n            s := mload(add(signature, 64))\n            v := byte(0, mload(add(signature, 96)))\n        }\n        if (v < 27) {\n            v += 27;\n        }\n        if (v != 27 && v != 28) {\n            return address(0);\n        } else {\n            // verify\n            return ecrecover(hash, v, r, s);\n        }\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": ["ast"]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}
