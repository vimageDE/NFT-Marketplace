{
  "address": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "nftAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "sigOwner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "typeOf",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "nonce",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        }
      ],
      "name": "PurchaseNft",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "name": "SellNft",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "nonce",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "typeOf",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        }
      ],
      "name": "getSigner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x7c620098145097e947e3948a522c0d574ce4c9a1c9864a6ac9f813c974043814",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
    "transactionIndex": 0,
    "gasUsed": "528536",
    "logsBloom": "0x
    "blockHash": "0x939905e6dc7e4f97f5953e2b02580ed805feddfbd5f21f064fff93228a61ce08",
    "transactionHash": "0x7c620098145097e947e3948a522c0d574ce4c9a1c9864a6ac9f813c974043814",
    "logs": [],
    "blockNumber": 2,
    "cumulativeGasUsed": "528536",
    "status": 1,
    "byzantium": true
  },
  "args": ["0x5FbDB2315678afecb367f032d93F642f64180aa3"],
  "numDeployments": 1,
  "solcInputHash": "f8c631d06aec0d670aee273c89df7e45",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"sigOwner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"typeOf\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"PurchaseNft\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"SellNft\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"typeOf\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"getSigner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Market.sol\":\"Market\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5bce51e11f7d194b79ea59fe00c9e8de9fa2c5530124960f29a24d4c740a3266\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/Market.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\n\\ncontract Market {\\n    uint256 private constant MIN_PRICE = 1000000000000000;\\n\\n    IERC721 private immutable i_nft;\\n    mapping(uint256 => bool) s_nonceIsUsed;\\n\\n    constructor(address nftAddress) {\\n        i_nft = IERC721(nftAddress);\\n    }\\n\\n    function PurchaseNft(\\n        uint256 tokenId,\\n        address sigOwner,\\n        uint256 price,\\n        string memory typeOf,\\n        uint256 nonce,\\n        uint256 timestamp,\\n        bytes memory signature\\n    ) public view returns (bool) {\\n        require(i_nft.ownerOf(tokenId) == msg.sender, \\\"Not owner\\\");\\n\\n        address signerOfSignature = getSigner(tokenId, nonce, price, typeOf, timestamp, signature);\\n        require(signerOfSignature == sigOwner, \\\"Wrong Signature\\\");\\n        require(s_nonceIsUsed[nonce] == false, \\\"Nonce used\\\");\\n\\n        // Do the purchase!\\n        return true;\\n    }\\n\\n    function SellNft(uint256 tokenId, uint256 price) public {}\\n\\n    // View Functions\\n    function getSigner(\\n        uint256 tokenId,\\n        uint256 nonce,\\n        uint256 price,\\n        string memory typeOf,\\n        uint256 timestamp,\\n        bytes memory signature\\n    ) public view returns (address) {\\n        address user = msg.sender;\\n\\n        // stringified types\\n        string\\n            memory EIP712_DOMAIN_TYPE = \\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\";\\n        string\\n            memory MESSAGE_TYPE = \\\"Message(uint256 tokenId,uint256 nonce,uint256 price,string typeOf,uint256 timestamp, address user)\\\";\\n\\n        // hash to prevent signature collision\\n        bytes32 DOMAIN_SEPARATOR = keccak256(\\n            abi.encode(\\n                keccak256(abi.encodePacked(EIP712_DOMAIN_TYPE)),\\n                keccak256(abi.encodePacked(\\\"NFT Portfolio\\\")),\\n                keccak256(abi.encodePacked(\\\"1\\\")),\\n                block.chainid,\\n                address(this)\\n            )\\n        );\\n\\n        // hash typed data\\n        // IMPORTANT!! abi.encode with MULTIPLE values/types. But with a SINGLE string, you MUST use abi.encodePacked\\n        // this is relevant for the abi.encode that comes AFTER the DOMAIN_SEPARATOR!\\n        bytes32 hash = keccak256(\\n            abi.encodePacked(\\n                \\\"\\\\x19\\\\x01\\\", // backslash is needed to escape the character\\n                DOMAIN_SEPARATOR,\\n                keccak256(\\n                    abi.encode(\\n                        keccak256(abi.encodePacked(MESSAGE_TYPE)),\\n                        tokenId,\\n                        nonce,\\n                        price,\\n                        keccak256(abi.encodePacked(typeOf)),\\n                        timestamp,\\n                        user\\n                    )\\n                )\\n            )\\n        );\\n\\n        return recover(hash, signature);\\n    }\\n\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        // split signature\\n        bytes32 r;\\n        bytes32 s;\\n        uint8 v;\\n        if (signature.length != 65) {\\n            return address(0);\\n        }\\n        assembly {\\n            r := mload(add(signature, 32))\\n            s := mload(add(signature, 64))\\n            v := byte(0, mload(add(signature, 96)))\\n        }\\n        if (v < 27) {\\n            v += 27;\\n        }\\n        if (v != 27 && v != 28) {\\n            return address(0);\\n        } else {\\n            // verify\\n            return ecrecover(hash, v, r, s);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5af3a5c2362356d753795825b47a7501218f247a8eb559a1cb725284d567090c\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a060405234801561001057600080fd5b5060405161091a38038061091a83398101604081905261002f91610040565b6001600160a01b0316608052610070565b60006020828403121561005257600080fd5b81516001600160a01b038116811461006957600080fd5b9392505050565b60805161089061008a600039600060d001526108906000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c80631f09485a14610046578063e17b60811461006e578063e74d2f6714610082575b600080fd5b6100596100543660046105e4565b6100ad565b60405190151581526020015b60405180910390f35b61008061007c366004610681565b5050565b005b6100956100903660046106a3565b610242565b6040516001600160a01b039091168152602001610065565b6040516331a9108f60e11b81526004810188905260009033906001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690636352211e90602401602060405180830381865afa158015610117573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061013b919061072c565b6001600160a01b0316146101825760405162461bcd60e51b81526020600482015260096024820152682737ba1037bbb732b960b91b60448201526064015b60405180910390fd5b6000610192898689898888610242565b9050876001600160a01b0316816001600160a01b0316146101e75760405162461bcd60e51b815260206004820152600f60248201526e57726f6e67205369676e617475726560881b6044820152606401610179565b60008581526020819052604090205460ff16156102335760405162461bcd60e51b815260206004820152600a602482015269139bdb98d9481d5cd95960b21b6044820152606401610179565b50600198975050505050505050565b600080339050600060405180608001604052806052815260200161080960529139905060006040518060a00160405280606281526020016107a76062913990506000826040516020016102959190610750565b604051602081830303815290604052805190602001206040516020016102ce906c4e465420506f7274666f6c696f60981b8152600d0190565b604051602081830303815290604052805190602001206040516020016102fb90603160f81b815260010190565b60408051601f1981840301815282825280516020918201209083019490945281019190915260608101919091524660808201523060a082015260c001604051602081830303815290604052805190602001209050600081836040516020016103639190610750565b604051602081830303815290604052805190602001208d8d8d8d60405160200161038d9190610750565b60408051601f198184030181528282528051602091820120908301969096528101939093526060830191909152608082015260a081019190915260c081018a90526001600160a01b03871660e0820152610100016040516020818303038152906040528051906020012060405160200161041e92919061190160f01b81526002810192909252602282015260420190565b6040516020818303038152906040528051906020012090506104408188610450565b9c9b505050505050505050505050565b600080600080845160411461046b5760009350505050610523565b50505060208201516040830151606084015160001a601b81101561049757610494601b8261077f565b90505b8060ff16601b141580156104af57508060ff16601c14155b156104c05760009350505050610523565b60408051600081526020810180835288905260ff831691810191909152606081018490526080810183905260019060a0016020604051602081039080840390855afa158015610513573d6000803e3d6000fd5b5050506020604051035193505050505b92915050565b6001600160a01b038116811461053e57600080fd5b50565b634e487b7160e01b600052604160045260246000fd5b600082601f83011261056857600080fd5b813567ffffffffffffffff8082111561058357610583610541565b604051601f8301601f19908116603f011681019082821181831017156105ab576105ab610541565b816040528381528660208588010111156105c457600080fd5b836020870160208301376000602085830101528094505050505092915050565b600080600080600080600060e0888a0312156105ff57600080fd5b87359650602088013561061181610529565b955060408801359450606088013567ffffffffffffffff8082111561063557600080fd5b6106418b838c01610557565b955060808a0135945060a08a0135935060c08a013591508082111561066557600080fd5b506106728a828b01610557565b91505092959891949750929550565b6000806040838503121561069457600080fd5b50508035926020909101359150565b60008060008060008060c087890312156106bc57600080fd5b863595506020870135945060408701359350606087013567ffffffffffffffff808211156106e957600080fd5b6106f58a838b01610557565b94506080890135935060a089013591508082111561071257600080fd5b5061071f89828a01610557565b9150509295509295509295565b60006020828403121561073e57600080fd5b815161074981610529565b9392505050565b6000825160005b818110156107715760208186018101518583015201610757565b506000920191825250919050565b60ff818116838216019081111561052357634e487b7160e01b600052601160045260246000fdfe4d6573736167652875696e7432353620746f6b656e49642c75696e74323536206e6f6e63652c75696e743235362070726963652c737472696e6720747970654f662c75696e743235362074696d657374616d702c2061646472657373207573657229454950373132446f6d61696e28737472696e67206e616d652c737472696e672076657273696f6e2c75696e7432353620636861696e49642c6164647265737320766572696679696e67436f6e747261637429a26469706673582212206f0e35927f444e2b5854338f9d01abbfa6b313a365e824093cdd2a16369f472464736f6c63430008130033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100415760003560e01c80631f09485a14610046578063e17b60811461006e578063e74d2f6714610082575b600080fd5b6100596100543660046105e4565b6100ad565b60405190151581526020015b60405180910390f35b61008061007c366004610681565b5050565b005b6100956100903660046106a3565b610242565b6040516001600160a01b039091168152602001610065565b6040516331a9108f60e11b81526004810188905260009033906001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690636352211e90602401602060405180830381865afa158015610117573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061013b919061072c565b6001600160a01b0316146101825760405162461bcd60e51b81526020600482015260096024820152682737ba1037bbb732b960b91b60448201526064015b60405180910390fd5b6000610192898689898888610242565b9050876001600160a01b0316816001600160a01b0316146101e75760405162461bcd60e51b815260206004820152600f60248201526e57726f6e67205369676e617475726560881b6044820152606401610179565b60008581526020819052604090205460ff16156102335760405162461bcd60e51b815260206004820152600a602482015269139bdb98d9481d5cd95960b21b6044820152606401610179565b50600198975050505050505050565b600080339050600060405180608001604052806052815260200161080960529139905060006040518060a00160405280606281526020016107a76062913990506000826040516020016102959190610750565b604051602081830303815290604052805190602001206040516020016102ce906c4e465420506f7274666f6c696f60981b8152600d0190565b604051602081830303815290604052805190602001206040516020016102fb90603160f81b815260010190565b60408051601f1981840301815282825280516020918201209083019490945281019190915260608101919091524660808201523060a082015260c001604051602081830303815290604052805190602001209050600081836040516020016103639190610750565b604051602081830303815290604052805190602001208d8d8d8d60405160200161038d9190610750565b60408051601f198184030181528282528051602091820120908301969096528101939093526060830191909152608082015260a081019190915260c081018a90526001600160a01b03871660e0820152610100016040516020818303038152906040528051906020012060405160200161041e92919061190160f01b81526002810192909252602282015260420190565b6040516020818303038152906040528051906020012090506104408188610450565b9c9b505050505050505050505050565b600080600080845160411461046b5760009350505050610523565b50505060208201516040830151606084015160001a601b81101561049757610494601b8261077f565b90505b8060ff16601b141580156104af57508060ff16601c14155b156104c05760009350505050610523565b60408051600081526020810180835288905260ff831691810191909152606081018490526080810183905260019060a0016020604051602081039080840390855afa158015610513573d6000803e3d6000fd5b5050506020604051035193505050505b92915050565b6001600160a01b038116811461053e57600080fd5b50565b634e487b7160e01b600052604160045260246000fd5b600082601f83011261056857600080fd5b813567ffffffffffffffff8082111561058357610583610541565b604051601f8301601f19908116603f011681019082821181831017156105ab576105ab610541565b816040528381528660208588010111156105c457600080fd5b836020870160208301376000602085830101528094505050505092915050565b600080600080600080600060e0888a0312156105ff57600080fd5b87359650602088013561061181610529565b955060408801359450606088013567ffffffffffffffff8082111561063557600080fd5b6106418b838c01610557565b955060808a0135945060a08a0135935060c08a013591508082111561066557600080fd5b506106728a828b01610557565b91505092959891949750929550565b6000806040838503121561069457600080fd5b50508035926020909101359150565b60008060008060008060c087890312156106bc57600080fd5b863595506020870135945060408701359350606087013567ffffffffffffffff808211156106e957600080fd5b6106f58a838b01610557565b94506080890135935060a089013591508082111561071257600080fd5b5061071f89828a01610557565b9150509295509295509295565b60006020828403121561073e57600080fd5b815161074981610529565b9392505050565b6000825160005b818110156107715760208186018101518583015201610757565b506000920191825250919050565b60ff818116838216019081111561052357634e487b7160e01b600052601160045260246000fdfe4d6573736167652875696e7432353620746f6b656e49642c75696e74323536206e6f6e63652c75696e743235362070726963652c737472696e6720747970654f662c75696e743235362074696d657374616d702c2061646472657373207573657229454950373132446f6d61696e28737472696e67206e616d652c737472696e672076657273696f6e2c75696e7432353620636861696e49642c6164647265737320766572696679696e67436f6e747261637429a26469706673582212206f0e35927f444e2b5854338f9d01abbfa6b313a365e824093cdd2a16369f472464736f6c63430008130033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 140,
        "contract": "contracts/Market.sol:Market",
        "label": "s_nonceIsUsed",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_uint256,t_bool)"
      }
    ],
    "types": {
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_uint256,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}
