{
  "address": "0x9fE46736679d2D9a65F0992F2272dE9f3c7fa6e0",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "nftAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "wethAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "Market_Expired",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Market_IsAlreadOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Market_NonceUsed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Market_NotOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Market_WrongSignature",
      "type": "error"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "user",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "nonce",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "typeOf",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "timestamp",
              "type": "uint256"
            }
          ],
          "internalType": "struct Market.Message",
          "name": "message",
          "type": "tuple"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        }
      ],
      "name": "BuyNft",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "user",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "nonce",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "typeOf",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "timestamp",
              "type": "uint256"
            }
          ],
          "internalType": "struct Market.Message",
          "name": "message",
          "type": "tuple"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        }
      ],
      "name": "SellNft",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "user",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "nonce",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "typeOf",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "timestamp",
              "type": "uint256"
            }
          ],
          "internalType": "struct Market.Message",
          "name": "message",
          "type": "tuple"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        }
      ],
      "name": "getSigner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xe10aeca7c4b483f9dce9f96420dc904973fbb4d4c020556a3ec7b3b439acf874",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x9fE46736679d2D9a65F0992F2272dE9f3c7fa6e0",
    "transactionIndex": 0,
    "gasUsed": "778361",
    "logsBloom": "0x
    "blockHash": "0xd1143fe1b8b0b23e41edb5cc8ab38bcd1276dba8bbd1edd666434d0b3030f785",
    "transactionHash": "0xe10aeca7c4b483f9dce9f96420dc904973fbb4d4c020556a3ec7b3b439acf874",
    "logs": [],
    "blockNumber": 3,
    "cumulativeGasUsed": "778361",
    "status": 1,
    "byzantium": true
  },
  "args": ["0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512", "0x5FbDB2315678afecb367f032d93F642f64180aa3"],
  "numDeployments": 1,
  "solcInputHash": "56aa4bb4a2e3116f089a64d5962190af",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"wethAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"Market_Expired\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Market_IsAlreadOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Market_NonceUsed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Market_NotOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Market_WrongSignature\",\"type\":\"error\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"typeOf\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"internalType\":\"struct Market.Message\",\"name\":\"message\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"BuyNft\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"typeOf\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"internalType\":\"struct Market.Message\",\"name\":\"message\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"SellNft\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"typeOf\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"internalType\":\"struct Market.Message\",\"name\":\"message\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"getSigner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Market.sol\":\"Market\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5bce51e11f7d194b79ea59fe00c9e8de9fa2c5530124960f29a24d4c740a3266\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/Market.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nerror Market_WrongSignature();\\nerror Market_NonceUsed();\\nerror Market_Expired();\\nerror Market_NotOwner();\\nerror Market_IsAlreadOwner();\\n\\ncontract Market {\\n    uint256 private constant MIN_PRICE = 1000000000000000;\\n\\n    IERC721 private immutable i_nft;\\n    IERC20 private immutable i_weth;\\n    mapping(uint256 => bool) s_nonceIsUsed;\\n\\n    struct Message {\\n        uint256 tokenId;\\n        address user;\\n        uint256 nonce;\\n        uint256 price;\\n        string typeOf;\\n        uint256 timestamp;\\n    }\\n\\n    constructor(address nftAddress, address wethAddress) {\\n        i_nft = IERC721(nftAddress);\\n        i_weth = IERC20(wethAddress);\\n    }\\n\\n    function BuyNft(Message memory message, bytes memory signature) external returns (bool) {\\n        message.typeOf = \\\"sale\\\";\\n\\n        address tokenOwner = i_nft.ownerOf(message.tokenId);\\n        if (tokenOwner != message.user) revert Market_NotOwner();\\n        if (message.timestamp < block.timestamp) revert Market_Expired();\\n        if (tokenOwner == msg.sender) revert Market_IsAlreadOwner();\\n        if (s_nonceIsUsed[message.nonce] == true) revert Market_NonceUsed();\\n        address ownerOfSignature = getSigner(message, signature);\\n        if (ownerOfSignature != tokenOwner) revert Market_WrongSignature();\\n\\n        // Send Money\\n        i_weth.transferFrom(msg.sender, tokenOwner, message.price);\\n        // Transfer NFT\\n        i_nft.safeTransferFrom(tokenOwner, msg.sender, message.tokenId);\\n\\n        s_nonceIsUsed[message.nonce] = true;\\n    }\\n\\n    function SellNft(\\n        /*uint256 tokenId,\\n        address offerOwner,\\n        uint256 price,\\n        uint256 nonce,\\n        uint256 timestamp, */\\n        Message memory message,\\n        bytes memory signature\\n    ) external {\\n        // Set Message type as \\\"offer\\\"\\n        message.typeOf = \\\"offer\\\";\\n\\n        address tokenOwner = i_nft.ownerOf(message.tokenId);\\n        if (tokenOwner != msg.sender) revert Market_NotOwner();\\n        if (message.timestamp < block.timestamp) revert Market_Expired();\\n        if (message.user == msg.sender) revert Market_IsAlreadOwner();\\n        if (s_nonceIsUsed[message.nonce] == true) revert Market_NonceUsed();\\n        address ownerOfSignature = getSigner(message, signature);\\n        if (ownerOfSignature != message.user) revert Market_WrongSignature();\\n\\n        // Get Money\\n        i_weth.transferFrom(message.user, tokenOwner, message.price);\\n        // Sell NFT\\n        i_nft.safeTransferFrom(tokenOwner, message.user, message.tokenId);\\n\\n        s_nonceIsUsed[message.nonce] = true;\\n    }\\n\\n    // View Functions\\n    function getSigner(Message memory message, bytes memory signature) public view returns (address) {\\n        // address user = msg.sender;\\n\\n        // stringified types\\n        string\\n            memory EIP712_DOMAIN_TYPE = \\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\";\\n        string\\n            memory MESSAGE_TYPE = \\\"Message(uint256 tokenId,uint256 nonce,uint256 price,uint256 timestamp,string typeOf,address user)\\\";\\n\\n        // hash to prevent signature collision\\n        bytes32 DOMAIN_SEPARATOR = keccak256(\\n            abi.encode(\\n                keccak256(abi.encodePacked(EIP712_DOMAIN_TYPE)),\\n                keccak256(abi.encodePacked(\\\"NFT Portfolio\\\")),\\n                keccak256(abi.encodePacked(\\\"1\\\")),\\n                block.chainid,\\n                address(this)\\n            )\\n        );\\n\\n        // hash typed data\\n        // IMPORTANT!! abi.encode with MULTIPLE values/types. But with a SINGLE string, you MUST use abi.encodePacked\\n        // this is relevant for the abi.encode that comes AFTER the DOMAIN_SEPARATOR!\\n        bytes32 hash = keccak256(\\n            abi.encodePacked(\\n                \\\"\\\\x19\\\\x01\\\", // backslash is needed to escape the character\\n                DOMAIN_SEPARATOR,\\n                keccak256(\\n                    abi.encode(\\n                        keccak256(abi.encodePacked(MESSAGE_TYPE)),\\n                        message.tokenId,\\n                        message.nonce,\\n                        message.price,\\n                        message.timestamp,\\n                        keccak256(abi.encodePacked(message.typeOf)),\\n                        message.user\\n                    )\\n                )\\n            )\\n        );\\n\\n        return recover(hash, signature);\\n    }\\n\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        // split signature\\n        bytes32 r;\\n        bytes32 s;\\n        uint8 v;\\n        if (signature.length != 65) {\\n            return address(0);\\n        }\\n        assembly {\\n            r := mload(add(signature, 32))\\n            s := mload(add(signature, 64))\\n            v := byte(0, mload(add(signature, 96)))\\n        }\\n        if (v < 27) {\\n            v += 27;\\n        }\\n        if (v != 27 && v != 28) {\\n            return address(0);\\n        } else {\\n            // verify\\n            return ecrecover(hash, v, r, s);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa8f18aaafcc283d71f6f968a954be0655c6e2272e446e7b6ef68212de42eb6b6\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60c060405234801561001057600080fd5b50604051610dea380380610dea83398101604081905261002f91610062565b6001600160a01b039182166080521660a052610095565b80516001600160a01b038116811461005d57600080fd5b919050565b6000806040838503121561007557600080fd5b61007e83610046565b915061008c60208401610046565b90509250929050565b60805160a051610d156100d560003960008181610282015261057101526000818160e90152818161031a015281816103e601526106060152610d156000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c806361d75858146100465780637be881581461005b578063995c2c0f14610083575b600080fd5b610059610054366004610a8e565b6100ae565b005b61006e610069366004610a8e565b6103a7565b60405190151581526020015b60405180910390f35b610096610091366004610a8e565b610697565b6040516001600160a01b03909116815260200161007a565b604080518082018252600581526437b33332b960d91b60208201526080840152825190516331a9108f60e11b81526000916001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001691636352211e916101209160040190815260200190565b602060405180830381865afa15801561013d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101619190610b73565b90506001600160a01b038116331461018c576040516303b1595d60e01b815260040160405180910390fd5b428360a0015110156101b15760405163af22eecf60e01b815260040160405180910390fd5b336001600160a01b031683602001516001600160a01b0316036101e757604051630405f71160e11b815260040160405180910390fd5b60408084015160009081526020819052205460ff16151560010361021d576040516244b77d60e71b815260040160405180910390fd5b60006102298484610697565b905083602001516001600160a01b0316816001600160a01b031614610261576040516314282e6960e21b815260040160405180910390fd5b602084015160608501516040516323b872dd60e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016926323b872dd926102b892879190600401610b90565b6020604051808303816000875af11580156102d7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102fb9190610bb4565b5060208401518451604051632142170760e11b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016926342842e0e926103519287929190600401610b90565b600060405180830381600087803b15801561036b57600080fd5b505af115801561037f573d6000803e3d6000fd5b5050506040948501516000908152602081905294909420805460ff1916600117905550505050565b60408051808201825260048082526373616c6560e01b60208301526080850191909152835191516331a9108f60e11b81529081019190915260009081907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690636352211e90602401602060405180830381865afa158015610435573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104599190610b73565b905083602001516001600160a01b0316816001600160a01b031614610491576040516303b1595d60e01b815260040160405180910390fd5b428460a0015110156104b65760405163af22eecf60e01b815260040160405180910390fd5b336001600160a01b038216036104df57604051630405f71160e11b815260040160405180910390fd5b60408085015160009081526020819052205460ff161515600103610515576040516244b77d60e71b815260040160405180910390fd5b60006105218585610697565b9050816001600160a01b0316816001600160a01b031614610555576040516314282e6960e21b815260040160405180910390fd5b60608501516040516323b872dd60e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016916323b872dd916105a9913391879190600401610b90565b6020604051808303816000875af11580156105c8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105ec9190610bb4565b508451604051632142170760e11b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016916342842e0e9161063e918691339190600401610b90565b600060405180830381600087803b15801561065857600080fd5b505af115801561066c573d6000803e3d6000fd5b5050506040958601516000908152602081905295909520805460ff1916600117905550909392505050565b600080604051806080016040528060528152602001610c8e60529139905060006040518060a0016040528060618152602001610c2d6061913990506000826040516020016106e59190610bd6565b6040516020818303038152906040528051906020012060405160200161071e906c4e465420506f7274666f6c696f60981b8152600d0190565b6040516020818303038152906040528051906020012060405160200161074b90603160f81b815260010190565b60408051601f1981840301815282825280516020918201209083019490945281019190915260608101919091524660808201523060a082015260c001604051602081830303815290604052805190602001209050600081836040516020016107b39190610bd6565b60405160208183030381529060405280519060200120886000015189604001518a606001518b60a001518c608001516040516020016107f29190610bd6565b604051602081830303815290604052805190602001208d602001516040516020016108579796959493929190968752602087019590955260408601939093526060850191909152608084015260a08301526001600160a01b031660c082015260e00190565b6040516020818303038152906040528051906020012060405160200161089492919061190160f01b81526002810192909252602282015260420190565b6040516020818303038152906040528051906020012090506108b681876108c3565b9450505050505b92915050565b60008060008084516041146108de57600093505050506108bd565b50505060208201516040830151606084015160001a601b81101561090a57610907601b82610c05565b90505b8060ff16601b1415801561092257508060ff16601c14155b1561093357600093505050506108bd565b60408051600081526020810180835288905260ff831691810191909152606081018490526080810183905260019060a0016020604051602081039080840390855afa158015610986573d6000803e3d6000fd5b5050506020604051035193505050506108bd565b634e487b7160e01b600052604160045260246000fd5b60405160c0810167ffffffffffffffff811182821017156109d3576109d361099a565b60405290565b6001600160a01b03811681146109ee57600080fd5b50565b600067ffffffffffffffff80841115610a0c57610a0c61099a565b604051601f8501601f19908116603f01168101908282118183101715610a3457610a3461099a565b81604052809350858152868686011115610a4d57600080fd5b858560208301376000602087830101525050509392505050565b600082601f830112610a7857600080fd5b610a87838335602085016109f1565b9392505050565b60008060408385031215610aa157600080fd5b823567ffffffffffffffff80821115610ab957600080fd5b9084019060c08287031215610acd57600080fd5b610ad56109b0565b823581526020830135610ae7816109d9565b806020830152506040830135604082015260608301356060820152608083013582811115610b1457600080fd5b8301601f81018813610b2557600080fd5b610b34888235602084016109f1565b60808301525060a083013560a0820152809450506020850135915080821115610b5c57600080fd5b50610b6985828601610a67565b9150509250929050565b600060208284031215610b8557600080fd5b8151610a87816109d9565b6001600160a01b039384168152919092166020820152604081019190915260600190565b600060208284031215610bc657600080fd5b81518015158114610a8757600080fd5b6000825160005b81811015610bf75760208186018101518583015201610bdd565b506000920191825250919050565b60ff81811683821601908111156108bd57634e487b7160e01b600052601160045260246000fdfe4d6573736167652875696e7432353620746f6b656e49642c75696e74323536206e6f6e63652c75696e743235362070726963652c75696e743235362074696d657374616d702c737472696e6720747970654f662c61646472657373207573657229454950373132446f6d61696e28737472696e67206e616d652c737472696e672076657273696f6e2c75696e7432353620636861696e49642c6164647265737320766572696679696e67436f6e747261637429a26469706673582212202063d1df4d45cff4c51ced9559762c17b33a32ecec2729bebe646deda531c9bd64736f6c63430008130033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100415760003560e01c806361d75858146100465780637be881581461005b578063995c2c0f14610083575b600080fd5b610059610054366004610a8e565b6100ae565b005b61006e610069366004610a8e565b6103a7565b60405190151581526020015b60405180910390f35b610096610091366004610a8e565b610697565b6040516001600160a01b03909116815260200161007a565b604080518082018252600581526437b33332b960d91b60208201526080840152825190516331a9108f60e11b81526000916001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001691636352211e916101209160040190815260200190565b602060405180830381865afa15801561013d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101619190610b73565b90506001600160a01b038116331461018c576040516303b1595d60e01b815260040160405180910390fd5b428360a0015110156101b15760405163af22eecf60e01b815260040160405180910390fd5b336001600160a01b031683602001516001600160a01b0316036101e757604051630405f71160e11b815260040160405180910390fd5b60408084015160009081526020819052205460ff16151560010361021d576040516244b77d60e71b815260040160405180910390fd5b60006102298484610697565b905083602001516001600160a01b0316816001600160a01b031614610261576040516314282e6960e21b815260040160405180910390fd5b602084015160608501516040516323b872dd60e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016926323b872dd926102b892879190600401610b90565b6020604051808303816000875af11580156102d7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102fb9190610bb4565b5060208401518451604051632142170760e11b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016926342842e0e926103519287929190600401610b90565b600060405180830381600087803b15801561036b57600080fd5b505af115801561037f573d6000803e3d6000fd5b5050506040948501516000908152602081905294909420805460ff1916600117905550505050565b60408051808201825260048082526373616c6560e01b60208301526080850191909152835191516331a9108f60e11b81529081019190915260009081907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690636352211e90602401602060405180830381865afa158015610435573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104599190610b73565b905083602001516001600160a01b0316816001600160a01b031614610491576040516303b1595d60e01b815260040160405180910390fd5b428460a0015110156104b65760405163af22eecf60e01b815260040160405180910390fd5b336001600160a01b038216036104df57604051630405f71160e11b815260040160405180910390fd5b60408085015160009081526020819052205460ff161515600103610515576040516244b77d60e71b815260040160405180910390fd5b60006105218585610697565b9050816001600160a01b0316816001600160a01b031614610555576040516314282e6960e21b815260040160405180910390fd5b60608501516040516323b872dd60e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016916323b872dd916105a9913391879190600401610b90565b6020604051808303816000875af11580156105c8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105ec9190610bb4565b508451604051632142170760e11b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016916342842e0e9161063e918691339190600401610b90565b600060405180830381600087803b15801561065857600080fd5b505af115801561066c573d6000803e3d6000fd5b5050506040958601516000908152602081905295909520805460ff1916600117905550909392505050565b600080604051806080016040528060528152602001610c8e60529139905060006040518060a0016040528060618152602001610c2d6061913990506000826040516020016106e59190610bd6565b6040516020818303038152906040528051906020012060405160200161071e906c4e465420506f7274666f6c696f60981b8152600d0190565b6040516020818303038152906040528051906020012060405160200161074b90603160f81b815260010190565b60408051601f1981840301815282825280516020918201209083019490945281019190915260608101919091524660808201523060a082015260c001604051602081830303815290604052805190602001209050600081836040516020016107b39190610bd6565b60405160208183030381529060405280519060200120886000015189604001518a606001518b60a001518c608001516040516020016107f29190610bd6565b604051602081830303815290604052805190602001208d602001516040516020016108579796959493929190968752602087019590955260408601939093526060850191909152608084015260a08301526001600160a01b031660c082015260e00190565b6040516020818303038152906040528051906020012060405160200161089492919061190160f01b81526002810192909252602282015260420190565b6040516020818303038152906040528051906020012090506108b681876108c3565b9450505050505b92915050565b60008060008084516041146108de57600093505050506108bd565b50505060208201516040830151606084015160001a601b81101561090a57610907601b82610c05565b90505b8060ff16601b1415801561092257508060ff16601c14155b1561093357600093505050506108bd565b60408051600081526020810180835288905260ff831691810191909152606081018490526080810183905260019060a0016020604051602081039080840390855afa158015610986573d6000803e3d6000fd5b5050506020604051035193505050506108bd565b634e487b7160e01b600052604160045260246000fd5b60405160c0810167ffffffffffffffff811182821017156109d3576109d361099a565b60405290565b6001600160a01b03811681146109ee57600080fd5b50565b600067ffffffffffffffff80841115610a0c57610a0c61099a565b604051601f8501601f19908116603f01168101908282118183101715610a3457610a3461099a565b81604052809350858152868686011115610a4d57600080fd5b858560208301376000602087830101525050509392505050565b600082601f830112610a7857600080fd5b610a87838335602085016109f1565b9392505050565b60008060408385031215610aa157600080fd5b823567ffffffffffffffff80821115610ab957600080fd5b9084019060c08287031215610acd57600080fd5b610ad56109b0565b823581526020830135610ae7816109d9565b806020830152506040830135604082015260608301356060820152608083013582811115610b1457600080fd5b8301601f81018813610b2557600080fd5b610b34888235602084016109f1565b60808301525060a083013560a0820152809450506020850135915080821115610b5c57600080fd5b50610b6985828601610a67565b9150509250929050565b600060208284031215610b8557600080fd5b8151610a87816109d9565b6001600160a01b039384168152919092166020820152604081019190915260600190565b600060208284031215610bc657600080fd5b81518015158114610a8757600080fd5b6000825160005b81811015610bf75760208186018101518583015201610bdd565b506000920191825250919050565b60ff81811683821601908111156108bd57634e487b7160e01b600052601160045260246000fdfe4d6573736167652875696e7432353620746f6b656e49642c75696e74323536206e6f6e63652c75696e743235362070726963652c75696e743235362074696d657374616d702c737472696e6720747970654f662c61646472657373207573657229454950373132446f6d61696e28737472696e67206e616d652c737472696e672076657273696f6e2c75696e7432353620636861696e49642c6164647265737320766572696679696e67436f6e747261637429a26469706673582212202063d1df4d45cff4c51ced9559762c17b33a32ecec2729bebe646deda531c9bd64736f6c63430008130033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 232,
        "contract": "contracts/Market.sol:Market",
        "label": "s_nonceIsUsed",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_uint256,t_bool)"
      }
    ],
    "types": {
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_uint256,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}
